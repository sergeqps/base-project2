import os
import psycopg2
import logging
from datetime import datetime, timedelta
from PIL import Image, ImageDraw, ImageFont
import io
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters
import urllib.parse as urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# üîê –í–ê–® –¢–û–ö–ï–ù –ë–û–¢–ê
BOT_TOKEN = os.getenv('BOT_TOKEN')
YOUR_USER_ID = int(os.getenv('YOUR_USER_ID', '7892045071'))

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# üîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö POSTGRESQL
def get_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL"""
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        raise ValueError("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    # –ü–∞—Ä—Å–∏–º URL –¥–ª—è Railway
    url = urlparse.urlparse(database_url)
    dbname = url.path[1:]
    user = url.username
    password = url.password
    host = url.hostname
    port = url.port
    
    return psycopg2.connect(
        dbname=dbname,
        user=user,
        password=password,
        host=host,
        port=port,
        sslmode='require'
    )

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
conn = get_connection()
cursor = conn.cursor()

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS scammers (
            id SERIAL PRIMARY KEY,
            user_id BIGINT UNIQUE NOT NULL,
            username TEXT,
            proof TEXT NOT NULL,
            added_by BIGINT NOT NULL,
            added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            scam_type TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            admin_id BIGINT PRIMARY KEY,
            username TEXT,
            role TEXT NOT NULL DEFAULT 'admin'
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bans (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            username TEXT,
            reason TEXT NOT NULL,
            banned_by BIGINT NOT NULL,
            ban_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            chat_id BIGINT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS warns (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            username TEXT,
            reason TEXT NOT NULL,
            warned_by BIGINT NOT NULL,
            warn_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            chat_id BIGINT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS mutes (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            username TEXT,
            reason TEXT NOT NULL,
            muted_by BIGINT NOT NULL,
            mute_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            unmute_date TIMESTAMP,
            chat_id BIGINT
        )
    ''')
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute("INSERT INTO admins (admin_id, username, role) VALUES (%s, %s, 'owner') ON CONFLICT (admin_id) DO NOTHING", (YOUR_USER_ID, 'owner'))
    conn.commit()

def ensure_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
    global conn, cursor
    try:
        cursor.execute("SELECT 1")
    except:
        print("üîÅ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î...")
        conn = get_connection()
        cursor = conn.cursor()

def is_owner(user_id):
    ensure_connection()
    cursor.execute("SELECT 1 FROM admins WHERE admin_id = %s AND role = 'owner'", (user_id,))
    return cursor.fetchone() is not None

def is_admin(user_id):
    ensure_connection()
    cursor.execute("SELECT 1 FROM admins WHERE admin_id = %s", (user_id,))
    return cursor.fetchone() is not None

def get_user_role(user_id):
    ensure_connection()
    cursor.execute("SELECT role FROM admins WHERE admin_id = %s", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 'user'

def is_target_owner(target_username):
    ensure_connection()
    cursor.execute("SELECT 1 FROM admins WHERE username = %s AND role = 'owner'", (target_username,))
    return cursor.fetchone() is not None

def create_status_image(status, user_info=""):
    colors = {
        '—Å–∫–∞–º–µ—Ä': ('#FF0000', '#FFFFFF'),
        '–≤–ª–∞–¥–µ–ª–µ—Ü': ('#FFD700', '#000000'),
        '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': ('#4169E1', '#FFFFFF'),
        '–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': ('#00FF00', '#000000')
    }
    
    bg_color, text_color = colors.get(status, ('#808080', '#FFFFFF'))
    
    width, height = 600, 300
    image = Image.new('RGB', (width, height), color=bg_color)
    draw = ImageDraw.Draw(image)
    
    # –†–∞–º–∫–∞
    draw.rectangle([0, 0, width-1, height-1], outline='#000000', width=5)
    
    # –®—Ä–∏—Ñ—Ç
    font = ImageFont.load_default()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    status_text = status.upper()
    text_width = len(status_text) * 20
    text_height = 30
    
    x = (width - text_width) // 2
    y = (height - text_height) // 2
    
    draw.text((x, y), status_text, fill=text_color, font=font)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if user_info:
        draw.text((50, y + 50), user_info, fill=text_color, font=font)
    
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    
    return img_byte_arr

def only_in_chats(func):
    async def wrapper(update: Update, context: CallbackContext):
        if update.effective_chat.type == 'private':
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö!\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–º."
            )
            return
        return await func(update, context)
    return wrapper

@only_in_chats
async def start(update: Update, context: CallbackContext):
    ensure_connection()
    user_id = update.effective_user.id
    username = update.effective_user.username
    full_name = update.effective_user.full_name
    chat_title = update.effective_chat.title
    
    if is_admin(user_id) and username:
        cursor.execute("UPDATE admins SET username = %s WHERE admin_id = %s", (username, user_id))
        conn.commit()
    
    role = get_user_role(user_id)
    role_text = "üëë –í–ª–∞–¥–µ–ª–µ—Ü" if role == 'owner' else "üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if role == 'admin' else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    text = (
        f"üõ°Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞–º–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ \"{chat_title}\"!\n\n"
        f"üë§ –í–∞—à —Å—Ç–∞—Ç—É—Å: {role_text}\n\n"
        "üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /check @username - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ /check 123456789 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ ID\n"
        "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã\n"
        "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
    )
    
    if is_admin(user_id):
        text += "\nüëÆ –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n"
        text += "‚Ä¢ /ban @username –ø—Ä–∏—á–∏–Ω–∞ - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        text += "‚Ä¢ /unban @username - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        text += "‚Ä¢ /warn @username –ø—Ä–∏—á–∏–Ω–∞ - –í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω\n"
        text += "‚Ä¢ /mute @username –≤—Ä–µ–º—è –ø—Ä–∏—á–∏–Ω–∞ - –ó–∞–º—É—Ç–∏—Ç—å\n"
        text += "‚Ä¢ /unmute @username - –†–∞–∑–º—É—Ç–∏—Ç—å\n"
        text += "‚Ä¢ /warns @username - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–Ω—ã\n"
        text += "‚Ä¢ /banlist - –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤\n"
        text += "‚Ä¢ /add_scammer user_id @username|–ø—Ä—É—Ñ—ã|—Ç–∏–ø - –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞\n"
    
    if is_owner(user_id):
        text += "\nüëë –ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:\n"
        text += "‚Ä¢ /add_admin user_id @username - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        text += "‚Ä¢ /add_owner user_id @username - –î–æ–±–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞\n"
        text += "‚Ä¢ /list_admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
    
    await update.message.reply_text(text)

@only_in_chats
async def help_command(update: Update, context: CallbackContext):
    ensure_connection()
    user_id = update.effective_user.id
    
    text = (
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–∞–∑—ã —Å–∫–∞–º–µ—Ä–æ–≤:\n\n"
        "üë§ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ /check @username - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ /check 123456789 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ ID\n"
        "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã\n"
        "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
    )
    
    if is_admin(user_id):
        text += (
            "üëÆ –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n"
            "‚Ä¢ /ban @username –ø—Ä–∏—á–∏–Ω–∞ - –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ /unban @username - –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ /warn @username –ø—Ä–∏—á–∏–Ω–∞ - –í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω\n"
            "‚Ä¢ /mute @username –≤—Ä–µ–º—è –ø—Ä–∏—á–∏–Ω–∞ - –ú—É—Ç\n"
            "‚Ä¢ /unmute @username - –†–∞–∑–º—É—Ç–∏—Ç—å\n"
            "‚Ä¢ /warns @username - –í–∞—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ /banlist - –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤\n"
            "‚Ä¢ /add_scammer user_id @username|–ø—Ä—É—Ñ—ã|—Ç–∏–ø - –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞\n\n"
            "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Å–∞–Ω–∫—Ü–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É!\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/ban @username –°–ø–∞–º\n"
            "/warn @username –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è\n"
            "/mute @username 1h –§–ª—É–¥\n"
            "/mute @username 30m –†–µ–∫–ª–∞–º–∞\n"
        )
    
    if is_owner(user_id):
        text += (
            "üëë –ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:\n"
            "‚Ä¢ /add_admin user_id @username - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ /add_owner user_id @username - –î–æ–±–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞\n"
            "‚Ä¢ /list_admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
        )
    
    await update.message.reply_text(text)

@only_in_chats
async def check_user(update: Update, context: CallbackContext):
    ensure_connection()
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check @username –∏–ª–∏ /check 123456789")
        return
    
    search_query = context.args[0].strip()
    print(f"üîç –ü–æ–∏—Å–∫: {search_query}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤
    if search_query.isdigit():
        cursor.execute("SELECT user_id, username, proof, scam_type FROM scammers WHERE user_id = %s", (int(search_query),))
        scammer_data = cursor.fetchone()
        
        if scammer_data:
            user_id, username, proof, scam_type = scammer_data
            text = f"üö® –ù–ê–ô–î–ï–ù –í –ë–ê–ó–ï –°–ö–ê–ú–ï–†–û–í!\n\nüë§ ID: `{user_id}`\n"
            if username:
                text += f"üì± Username: @{username}\n"
            if scam_type:
                text += f"üéØ –¢–∏–ø —Å–∫–∞–º–∞: {scam_type}\n"
            text += f"üìù –ü—Ä—É—Ñ—ã: {proof}"
            await update.message.reply_text(text, parse_mode='Markdown')
            return

    elif search_query.startswith('@'):
        username = search_query[1:].lower()
        cursor.execute("SELECT user_id, username, proof, scam_type FROM scammers WHERE LOWER(username) = %s", (username,))
        scammer_data = cursor.fetchone()
        
        if scammer_data:
            user_id, username, proof, scam_type = scammer_data
            text = f"üö® –ù–ê–ô–î–ï–ù –í –ë–ê–ó–ï –°–ö–ê–ú–ï–†–û–í!\n\nüë§ ID: `{user_id}`\nüì± Username: @{username}\n"
            if scam_type:
                text += f"üéØ –¢–∏–ø —Å–∫–∞–º–∞: {scam_type}\n"
            text += f"üìù –ü—Ä—É—Ñ—ã: {proof}"
            await update.message.reply_text(text, parse_mode='Markdown')
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if search_query.isdigit():
        cursor.execute("SELECT admin_id, username, role FROM admins WHERE admin_id = %s", (int(search_query),))
        admin_data = cursor.fetchone()
        
        if admin_data:
            admin_id, username, role = admin_data
            role_text = "üëë –í–õ–ê–î–ï–õ–ï–¶" if role == 'owner' else "üëÆ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†"
            text = f"{role_text}\n\nüë§ ID: `{admin_id}`\n"
            if username:
                text += f"üì± Username: @{username}\n"
            text += f"üíº –†–æ–ª—å: {role}"
            await update.message.reply_text(text, parse_mode='Markdown')
            return

    elif search_query.startswith('@'):
        username = search_query[1:].lower()
        cursor.execute("SELECT admin_id, username, role FROM admins WHERE LOWER(username) = %s", (username,))
        admin_data = cursor.fetchone()
        
        if admin_data:
            admin_id, username, role = admin_data
            role_text = "üëë –í–õ–ê–î–ï–õ–ï–¶" if role == 'owner' else "üëÆ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†"
            text = f"{role_text}\n\nüë§ ID: `{admin_id}`\nüì± Username: @{username}\nüíº –†–æ–ª—å: {role}"
            await update.message.reply_text(text, parse_mode='Markdown')
            return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ
    text = "‚úÖ –û–ë–´–ß–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨\n\n–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —Å–∫–∞–º–µ—Ä–æ–≤ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    await update.message.reply_text(text, parse_mode='Markdown')

@only_in_chats
async def stats(update: Update, context: CallbackContext):
    ensure_connection()
    cursor.execute("SELECT COUNT(*) FROM scammers")
    scammer_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM admins")
    admin_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM bans")
    ban_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM warns")
    warn_count = cursor.fetchone()[0]
    
    text = (
        f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:\n\n"
        f"üö® –°–∫–∞–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: {scammer_count}\n"
        f"üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}\n"
        f"üî® –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {ban_count}\n"
        f"‚ö†Ô∏è –í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: {warn_count}"
    )
    
    await update.message.reply_text(text)

@only_in_chats
async def add_scammer(update: Update, context: CallbackContext):
    ensure_connection()
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫–∞–º–µ—Ä–æ–≤!")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_scammer user_id @username|–ø—Ä—É—Ñ—ã|—Ç–∏–ø\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/add_scammer 123456789 @scammer|–ö–∏–Ω—É–ª –Ω–∞ 1000—Ä|–ù–µ–≤—ã–≤–æ–¥\n"
            "/add_scammer 987654321 @baduser|–û–±–º–∞–Ω –ø—Ä–∏ –æ–±–º–µ–Ω–µ|–§–µ–π–∫–æ–≤—ã–π –æ–±–º–µ–Ω–Ω–∏–∫"
        )
        return
    
    data = ' '.join(context.args)
    
    try:
        parts = data.split('|')
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: user_id @username|–ø—Ä—É—Ñ—ã|—Ç–∏–ø")
            return
        
        first_part = parts[0].strip().split()
        if len(first_part) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏ username! –§–æ—Ä–º–∞—Ç: user_id @username")
            return
        
        user_id_part = first_part[0]
        username_part = first_part[1]
        
        if not user_id_part.isdigit():
            await update.message.reply_text("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        
        scammer_id = int(user_id_part)
        
        if not username_part.startswith('@'):
            await update.message.reply_text("‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @!")
            return
        
        username = username_part[1:].lower()
        proof = parts[1].strip()
        scam_type = parts[2].strip() if len(parts) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        cursor.execute("SELECT 1 FROM scammers WHERE user_id = %s OR username = %s", (scammer_id, username))
        if cursor.fetchone():
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ —Å–∫–∞–º–µ—Ä–æ–≤!")
            return
        
        cursor.execute("INSERT INTO scammers (user_id, username, proof, added_by, scam_type) VALUES (%s, %s, %s, %s, %s)",
                      (scammer_id, username, proof, user_id, scam_type))
        conn.commit()
        
        await update.message.reply_text(f"‚úÖ –°–∫–∞–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\nüë§ ID: {scammer_id}\nüì± Username: @{username}\nüéØ –¢–∏–ø: {scam_type}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")

@only_in_chats
async def ban_user(update: Update, context: CallbackContext):
    ensure_connection()
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username –ø—Ä–∏—á–∏–Ω–∞")
        return
    
    target_username = context.args[0]
    reason = ' '.join(context.args[1:])
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
        return
    
    target_username = target_username[1:]
    
    if is_target_owner(target_username):
        await update.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞!")
        return
    
    try:
        cursor.execute("INSERT INTO bans (user_id, username, reason, banned_by, chat_id) VALUES (%s, %s, %s, %s, %s)",
                      (0, target_username, reason, user_id, chat_id))
        conn.commit()
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –∑–∞–±–∞–Ω–µ–Ω!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {str(e)}")

@only_in_chats
async def unban_user(update: Update, context: CallbackContext):
    ensure_connection()
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban @username")
        return
    
    target_username = context.args[0]
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
        return
    
    target_username = target_username[1:]
    
    try:
        cursor.execute("DELETE FROM bans WHERE username = %s", (target_username,))
        conn.commit()
        
        if cursor.rowcount > 0:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —Ä–∞–∑–±–∞–Ω–µ–Ω!")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–æ–≤.")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {str(e)}")

@only_in_chats
async def warn_user(update: Update, context: CallbackContext):
    ensure_connection()
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞—Ä–Ω—ã!")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warn @username –ø—Ä–∏—á–∏–Ω–∞")
        return
    
    target_username = context.args[0]
    reason = ' '.join(context.args[1:])
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
        return
    
    target_username = target_username[1:]
    
    if is_target_owner(target_username):
        await update.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É!")
        return
    
    try:
        cursor.execute("INSERT INTO warns (user_id, username, reason, warned_by, chat_id) VALUES (%s, %s, %s, %s, %s)",
                      (0, target_username, reason, user_id, chat_id))
        conn.commit()
        
        cursor.execute("SELECT COUNT(*) FROM warns WHERE username = %s", (target_username,))
        warn_count = cursor.fetchone()[0]
        
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –ø–æ–ª—É—á–∏–ª –≤–∞—Ä–Ω!\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: {warn_count}/3"
        )
        
        if warn_count >= 3:
            cursor.execute("INSERT INTO bans (user_id, username, reason, banned_by, chat_id) VALUES (%s, %s, %s, %s, %s)",
                          (0, target_username, f"–ê–≤—Ç–æ–±–∞–Ω –∑–∞ 3 –≤–∞—Ä–Ω–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π: {reason})", user_id, chat_id))
            cursor.execute("DELETE FROM warns WHERE username = %s", (target_username,))
            conn.commit()
            
            await update.message.reply_text(
                f"üö® –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ù!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –ø–æ–ª—É—á–∏–ª –±–∞–Ω –∑–∞ 3 –≤–∞–Ω–∞.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞—Ä–Ω–∞: {reason}"
            )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –≤–∞—Ä–Ω–∞: {str(e)}")

@only_in_chats
async def mute_user(update: Update, context: CallbackContext):
    ensure_connection()
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    if not context.args or len(context.args) < 3:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute @username –≤—Ä–µ–º—è –ø—Ä–∏—á–∏–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä—ã:\n/mute @username 1h –§–ª—É–¥\n/mute @username 30m –°–ø–∞–º")
        return
    
    target_username = context.args[0]
    mute_time = context.args[1]
    reason = ' '.join(context.args[2:])
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
        return
    
    target_username = target_username[1:]
    
    if is_target_owner(target_username):
        await update.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞!")
        return
    
    try:
        # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞
        cursor.execute("INSERT INTO mutes (user_id, username, reason, muted_by, chat_id) VALUES (%s, %s, %s, %s, %s)",
                      (0, target_username, f"{reason} (–≤—Ä–µ–º—è: {mute_time})", user_id, chat_id))
        conn.commit()
        
        await update.message.reply_text(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {mute_time}!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {str(e)}")

@only_in_chats
async def add_owner(update: Update, context: CallbackContext):
    ensure_connection()
    user_id = update.effective_user.id
    
    if not is_owner(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_owner user_id @username\n\n–ü—Ä–∏–º–µ—Ä:\n/add_owner 123456789 @username")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –∏ username!\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_owner user_id @username")
        return
    
    target_id = context.args[0]
    target_username = context.args[1]
    
    if not target_id.isdigit():
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    target_id = int(target_id)
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @!")
        return
    
    target_username = target_username[1:]
    
    try:
        cursor.execute("SELECT 1 FROM admins WHERE admin_id = %s OR username = %s", (target_id, target_username))
        if cursor.fetchone():
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        cursor.execute("INSERT INTO admins (admin_id, username, role) VALUES (%s, %s, 'owner')",
                      (target_id, target_username))
        conn.commit()
        
        await update.message.reply_text(f"‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω!\nüë§ ID: {target_id}\nüì± Username: @{target_username}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {str(e)}")

@only_in_chats
async def add_admin(update: Update, context: CallbackContext):
    ensure_connection()
    user_id = update.effective_user.id
    
    if not is_owner(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin user_id @username\n\n–ü—Ä–∏–º–µ—Ä:\n/add_admin 123456789 @username")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –∏ username!\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin user_id @username")
        return
    
    target_id = context.args[0]
    target_username = context.args[1]
    
    if not target_id.isdigit():
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    target_id = int(target_id)
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @!")
        return
    
    target_username = target_username[1:]
    
    try:
        cursor.execute("SELECT 1 FROM admins WHERE admin_id = %s OR username = %s", (target_id, target_username))
        if cursor.fetchone():
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        cursor.execute("INSERT INTO admins (admin_id, username, role) VALUES (%s, %s, 'admin')",
                      (target_id, target_username))
        conn.commit()
        
        await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\nüë§ ID: {target_id}\nüì± Username: @{target_username}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")

@only_in_chats
async def list_admins(update: Update, context: CallbackContext):
    ensure_connection()
    cursor.execute("SELECT admin_id, username, role FROM admins ORDER BY role DESC, username")
    admins = cursor.fetchall()
    
    if not admins:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")
        return
    
    text = "üëë –í–õ–ê–î–ï–õ–¨–¶–´:\n"
    owners = [admin for admin in admins if admin[2] == 'owner']
    for admin in owners:
        admin_id, username, role = admin
        text += f"‚Ä¢ ID: `{admin_id}`" + (f" | @{username}" if username else " | username –Ω–µ —É–∫–∞–∑–∞–Ω") + "\n"
    
    text += "\nüëÆ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´:\n"
    admins_list = [admin for admin in admins if admin[2] == 'admin']
    for admin in admins_list:
        admin_id, username, role = admin
        text += f"‚Ä¢ ID: `{admin_id}`" + (f" | @{username}" if username else " | username –Ω–µ —É–∫–∞–∑–∞–Ω") + "\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üîÑ –°–æ–∑–¥–∞–µ–º application...")
    
    # –°–æ–∑–¥–∞–µ–º application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("check", check_user))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("ban", ban_user))
    application.add_handler(CommandHandler("unban", unban_user))
    application.add_handler(CommandHandler("warn", warn_user))
    application.add_handler(CommandHandler("mute", mute_user))
    application.add_handler(CommandHandler("add_scammer", add_scammer))
    application.add_handler(CommandHandler("add_owner", add_owner))
    application.add_handler(CommandHandler("add_admin", add_admin))
    application.add_handler(CommandHandler("list_admins", list_admins))
    
    print("‚úÖ Application —Å–æ–∑–¥–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫
    main()

