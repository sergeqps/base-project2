import os
import sqlite3
import logging
from datetime import datetime, timedelta
from PIL import Image, ImageDraw, ImageFont
import io
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ‚ö†Ô∏è –î–ê–ù–ù–´–ï –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
BOT_TOKEN = os.getenv('BOT_TOKEN')
YOUR_USER_ID = int(os.getenv('YOUR_USER_ID', '123456789'))

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

print("üõ°Ô∏è –ë–æ—Ç –±–∞–∑—ã —Å–∫–∞–º–µ—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
print(f"‚úÖ YOUR_USER_ID: {YOUR_USER_ID}")

conn = sqlite3.connect('scammers.db', check_same_thread=False)
cursor = conn.cursor()

def init_db():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS scammers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            proof TEXT NOT NULL,
            added_by INTEGER NOT NULL,
            added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            scam_type TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            admin_id INTEGER PRIMARY KEY,
            username TEXT,
            role TEXT NOT NULL DEFAULT 'admin'
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            reason TEXT NOT NULL,
            banned_by INTEGER NOT NULL,
            ban_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            chat_id INTEGER
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS warns (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            reason TEXT NOT NULL,
            warned_by INTEGER NOT NULL,
            warn_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            chat_id INTEGER
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS mutes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            reason TEXT NOT NULL,
            muted_by INTEGER NOT NULL,
            mute_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            unmute_date TIMESTAMP,
            chat_id INTEGER
        )
    ''')
    cursor.execute("INSERT OR IGNORE INTO admins (admin_id, role) VALUES (?, 'owner')", (YOUR_USER_ID,))
    conn.commit()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def is_owner(user_id):
    cursor.execute("SELECT 1 FROM admins WHERE admin_id = ? AND role = 'owner'", (user_id,))
    return cursor.fetchone() is not None

def is_admin(user_id):
    cursor.execute("SELECT 1 FROM admins WHERE admin_id = ?", (user_id,))
    return cursor.fetchone() is not None

def get_user_role(user_id):
    cursor.execute("SELECT role FROM admins WHERE admin_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 'user'

def is_target_owner(target_username):
    cursor.execute("SELECT 1 FROM admins WHERE username = ? AND role = 'owner'", (target_username,))
    return cursor.fetchone() is not None

def create_status_image(status, user_info=""):
    colors = {
        '—Å–∫–∞–º–µ—Ä': ('#FF0000', '#FFFFFF'),
        '–≤–ª–∞–¥–µ–ª–µ—Ü': ('#FFD700', '#000000'),
        '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': ('#4169E1', '#FFFFFF'),
        '–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': ('#00FF00', '#000000')
    }
    
    bg_color, text_color = colors.get(status, ('#808080', '#FFFFFF'))
    
    width, height = 600, 300
    image = Image.new('RGB', (width, height), color=bg_color)
    draw = ImageDraw.Draw(image)
    
    # –†–∞–º–∫–∞
    draw.rectangle([0, 0, width-1, height-1], outline='#000000', width=5)
    
    # –®—Ä–∏—Ñ—Ç
    font = ImageFont.load_default()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    status_text = status.upper()
    text_width = len(status_text) * 20
    text_height = 30
    
    x = (width - text_width) // 2
    y = (height - text_height) // 2
    
    draw.text((x, y), status_text, fill=text_color, font=font)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if user_info:
        draw.text((50, y + 50), user_info, fill=text_color, font=font)
    
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    
    return img_byte_arr

def only_in_chats(func):
    async def wrapper(update: Update, context: CallbackContext):
        if update.effective_chat.type == 'private':
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö!\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–º."
            )
            return
        return await func(update, context)
    return wrapper

@only_in_chats
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username
    full_name = update.effective_user.full_name
    chat_title = update.effective_chat.title
    
    if is_admin(user_id) and username:
        cursor.execute("UPDATE admins SET username = ? WHERE admin_id = ?", (username, user_id))
        conn.commit()
    
    role = get_user_role(user_id)
    role_text = "üëë –í–ª–∞–¥–µ–ª–µ—Ü" if role == 'owner' else "üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if role == 'admin' else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    text = (
        f"üõ°Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞–º–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ \"{chat_title}\"!\n\n"
        f"üë§ –í–∞—à —Å—Ç–∞—Ç—É—Å: {role_text}\n\n"
        "üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /check @username - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ /check 123456789 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ ID\n"
        "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã\n"
        "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
    )
    
    if is_admin(user_id):
        text += "\nüëÆ –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n"
        text += "‚Ä¢ /ban @username –ø—Ä–∏—á–∏–Ω–∞ - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        text += "‚Ä¢ /unban @username - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        text += "‚Ä¢ /warn @username –ø—Ä–∏—á–∏–Ω–∞ - –í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω\n"
        text += "‚Ä¢ /mute @username –≤—Ä–µ–º—è –ø—Ä–∏—á–∏–Ω–∞ - –ó–∞–º—É—Ç–∏—Ç—å\n"
        text += "‚Ä¢ /unmute @username - –†–∞–∑–º—É—Ç–∏—Ç—å\n"
        text += "‚Ä¢ /warns @username - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–Ω—ã\n"
        text += "‚Ä¢ /banlist - –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤\n"
        text += "‚Ä¢ /add_scammer user_id|–ø—Ä—É—Ñ—ã|—Ç–∏–ø - –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞\n"
    
    if is_owner(user_id):
        text += "\nüëë –ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:\n"
        text += "‚Ä¢ /add_admin @username - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        text += "‚Ä¢ /add_owner @username - –î–æ–±–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞\n"
        text += "‚Ä¢ /list_admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
    
    await update.message.reply_text(text)

@only_in_chats
async def help_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    text = (
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–∞–∑—ã —Å–∫–∞–º–µ—Ä–æ–≤:\n\n"
        "üë§ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ /check @username - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ /check 123456789 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ ID\n"
        "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã\n"
        "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
    )
    
    if is_admin(user_id):
        text += (
            "üëÆ –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n"
            "‚Ä¢ /ban @username –ø—Ä–∏—á–∏–Ω–∞ - –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ /unban @username - –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ /warn @username –ø—Ä–∏—á–∏–Ω–∞ - –í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω\n"
            "‚Ä¢ /mute @username –≤—Ä–µ–º—è –ø—Ä–∏—á–∏–Ω–∞ - –ú—É—Ç\n"
            "‚Ä¢ /unmute @username - –†–∞–∑–º—É—Ç–∏—Ç—å\n"
            "‚Ä¢ /warns @username - –í–∞—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ /banlist - –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤\n"
            "‚Ä¢ /add_scammer user_id|–ø—Ä—É—Ñ—ã|—Ç–∏–ø - –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞\n\n"
            "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Å–∞–Ω–∫—Ü–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É!\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/ban @username –°–ø–∞–º\n"
            "/warn @username –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è\n"
            "/mute @username 1h –§–ª—É–¥\n"
            "/mute @username 30m –†–µ–∫–ª–∞–º–∞\n"
        )
    
    if is_owner(user_id):
        text += (
            "üëë –ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:\n"
            "‚Ä¢ /add_admin @username - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ /add_owner @username - –î–æ–±–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞\n"
            "‚Ä¢ /list_admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
        )
    
    await update.message.reply_text(text)

@only_in_chats
async def check_user(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check @username –∏–ª–∏ /check 123456789")
        return
    
    search_query = context.args[0]

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤
    if search_query.isdigit():
        cursor.execute("SELECT user_id, username, proof, scam_type FROM scammers WHERE user_id = ?", (int(search_query),))
        scammer_data = cursor.fetchone()
        
        if scammer_data:
            user_id, username, proof, scam_type = scammer_data
            user_info = f"ID: {user_id}" + (f" | @{username}" if username else "")
            image_bytes = create_status_image('—Å–∫–∞–º–µ—Ä', user_info)
            
            text = f"üö® –ù–ê–ô–î–ï–ù –í –ë–ê–ó–ï –°–ö–ê–ú–ï–†–û–í!\n\nüë§ ID: `{user_id}`\n"
            if username:
                text += f"üì± Username: @{username}\n"
            if scam_type:
                text += f"üéØ –¢–∏–ø —Å–∫–∞–º–∞: {scam_type}\n"
            text += f"üìù –ü—Ä—É—Ñ—ã: {proof}"
            
            await update.message.reply_photo(
                photo=image_bytes,
                caption=text,
                parse_mode='Markdown'
            )
            return

    elif search_query.startswith('@'):
        username = search_query[1:].lower()
        cursor.execute("SELECT user_id, username, proof, scam_type FROM scammers WHERE LOWER(username) = ?", (username,))
        scammer_data = cursor.fetchone()
        
        if scammer_data:
            user_id, username, proof, scam_type = scammer_data
            user_info = f"ID: {user_id} | @{username}"
            image_bytes = create_status_image('—Å–∫–∞–º–µ—Ä', user_info)
            
            text = f"üö® –ù–ê–ô–î–ï–ù –í –ë–ê–ó–ï –°–ö–ê–ú–ï–†–û–í!\n\nüë§ ID: `{user_id}`\nüì± Username: @{username}\n"
            if scam_type:
                text += f"üéØ –¢–∏–ø —Å–∫–∞–º–∞: {scam_type}\n"
            text += f"üìù –ü—Ä—É—Ñ—ã: {proof}"
            
            await update.message.reply_photo(
                photo=image_bytes,
                caption=text,
                parse_mode='Markdown'
            )
            return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∫–∞–º–µ—Ä–∞—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if search_query.isdigit():
        cursor.execute("SELECT admin_id, username, role FROM admins WHERE admin_id = ?", (int(search_query),))
        admin_data = cursor.fetchone()
        
        if admin_data:
            admin_id, username, role = admin_data
            user_info = f"ID: {admin_id}" + (f" | @{username}" if username else "")
            image_bytes = create_status_image('–≤–ª–∞–¥–µ–ª–µ—Ü' if role == 'owner' else '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', user_info)
            
            role_text = "üëë –í–õ–ê–î–ï–õ–ï–¶" if role == 'owner' else "üëÆ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†"
            text = f"{role_text}\n\nüë§ ID: `{admin_id}`\n"
            if username:
                text += f"üì± Username: @{username}\n"
            text += f"üíº –†–æ–ª—å: {role}"
            
            await update.message.reply_photo(
                photo=image_bytes,
                caption=text,
                parse_mode='Markdown'
            )
            return

    elif search_query.startswith('@'):
        username = search_query[1:].lower()
        cursor.execute("SELECT admin_id, username, role FROM admins WHERE LOWER(username) = ?", (username,))
        admin_data = cursor.fetchone()
        
        if admin_data:
            admin_id, username, role = admin_data
            user_info = f"ID: {admin_id} | @{username}"
            image_bytes = create_status_image('–≤–ª–∞–¥–µ–ª–µ—Ü' if role == 'owner' else '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', user_info)
            
            role_text = "üëë –í–õ–ê–î–ï–õ–ï–¶" if role == 'owner' else "üëÆ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†"
            text = f"{role_text}\n\nüë§ ID: `{admin_id}`\nüì± Username: @{username}\n"
            text += f"üíº –†–æ–ª—å: {role}"
            
            await update.message.reply_photo(
                photo=image_bytes,
                caption=text,
                parse_mode='Markdown'
            )
            return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ - –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_info = f"–ó–∞–ø—Ä–æ—Å: {search_query}"
    image_bytes = create_status_image('–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', user_info)
    
    text = "‚úÖ –û–ë–´–ß–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨\n\n–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —Å–∫–∞–º–µ—Ä–æ–≤ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    
    await update.message.reply_photo(
        photo=image_bytes,
        caption=text,
        parse_mode='Markdown'
    )

@only_in_chats
async def add_scammer(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫–∞–º–µ—Ä–æ–≤!")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_scammer user_id|–ø—Ä—É—Ñ—ã|—Ç–∏–ø\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/add_scammer 123456789|–ö–∏–Ω—É–ª –Ω–∞ 1000—Ä|–ù–µ–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
            "/add_scammer @scammer|–û–±–º–∞–Ω –ø—Ä–∏ –æ–±–º–µ–Ω–µ|–§–µ–π–∫–æ–≤—ã–π –æ–±–º–µ–Ω–Ω–∏–∫"
        )
        return
    
    data = ' '.join(context.args)
    
    try:
        parts = data.split('|')
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: user_id|–ø—Ä—É—Ñ—ã|—Ç–∏–ø")
            return
        
        user_id_part = parts[0].strip()
        proof = parts[1].strip()
        scam_type = parts[2].strip() if len(parts) > 3 else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        if user_id_part.isdigit():
            scammer_id = int(user_id_part)
            username = None
        elif user_id_part.startswith('@'):
            username = user_id_part[1:].lower()
            scammer_id = None
            await update.message.reply_text("‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–º–µ—Ä–∞ –Ω—É–∂–µ–Ω User ID, –∞ –Ω–µ username.")
            return
        else:
            await update.message.reply_text("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ username –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
            return
        
        if scammer_id is None:
            return
        
        cursor.execute("SELECT 1 FROM scammers WHERE user_id = ?", (scammer_id,))
        if cursor.fetchone():
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ —Å–∫–∞–º–µ—Ä–æ–≤.")
            return
        
        cursor.execute("INSERT INTO scammers (user_id, username, proof, added_by, scam_type) VALUES (?, ?, ?, ?, ?)",
                      (scammer_id, username, proof, user_id, scam_type))
        conn.commit()
        
        await update.message.reply_text("‚úÖ –°–∫–∞–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")
        
    except ValueError:
        await update.message.reply_text("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")

@only_in_chats
async def ban_user(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username –ø—Ä–∏—á–∏–Ω–∞")
        return
    
    target_username = context.args[0]
    reason = ' '.join(context.args[1:])
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
        return
    
    target_username = target_username[1:]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    if is_target_owner(target_username):
        await update.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞!")
        return
    
    try:
        cursor.execute("INSERT INTO bans (user_id, username, reason, banned_by, chat_id) VALUES (?, ?, ?, ?, ?)",
                      (0, target_username, reason, user_id, chat_id))
        conn.commit()
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –∑–∞–±–∞–Ω–µ–Ω!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {str(e)}")

@only_in_chats
async def unban_user(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban @username")
        return
    
    target_username = context.args[0]
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
        return
    
    target_username = target_username[1:]
    
    try:
        cursor.execute("DELETE FROM bans WHERE username = ?", (target_username,))
        conn.commit()
        
        if cursor.rowcount > 0:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —Ä–∞–∑–±–∞–Ω–µ–Ω!")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–æ–≤.")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {str(e)}")

@only_in_chats
async def warn_user(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞—Ä–Ω—ã!")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warn @username –ø—Ä–∏—á–∏–Ω–∞")
        return
    
    target_username = context.args[0]
    reason = ' '.join(context.args[1:])
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
        return
    
    target_username = target_username[1:]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    if is_target_owner(target_username):
        await update.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É!")
        return
    
    try:
        cursor.execute("INSERT INTO warns (user_id, username, reason, warned_by, chat_id) VALUES (?, ?, ?, ?, ?)",
                      (0, target_username, reason, user_id, chat_id))
        conn.commit()
        
        cursor.execute("SELECT COUNT(*) FROM warns WHERE username = ?", (target_username,))
        warn_count = cursor.fetchone()[0]
        
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –ø–æ–ª—É—á–∏–ª –≤–∞—Ä–Ω!\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: {warn_count}/3"
        )
        
        if warn_count >= 3:
            cursor.execute("INSERT INTO bans (user_id, username, reason, banned_by, chat_id) VALUES (?, ?, ?, ?, ?)",
                          (0, target_username, f"–ê–≤—Ç–æ–±–∞–Ω –∑–∞ 3 –≤–∞—Ä–Ω–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π: {reason})", user_id, chat_id))
            cursor.execute("DELETE FROM warns WHERE username = ?", (target_username,))
            conn.commit()
            
            await update.message.reply_text(
                f"üö® –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ù!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –ø–æ–ª—É—á–∏–ª –±–∞–Ω –∑–∞ 3 –≤–∞—Ä–Ω–∞.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞—Ä–Ω–∞: {reason}"
            )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –≤–∞—Ä–Ω–∞: {str(e)}")

@only_in_chats
async def mute_user(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    if not context.args or len(context.args) < 3:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute @username –≤—Ä–µ–º—è –ø—Ä–∏—á–∏–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä—ã:\n/mute @username 1h –§–ª—É–¥\n/mute @username 30m –†–µ–∫–ª–∞–º–∞")
        return
    
    target_username = context.args[0]
    time_str = context.args[1]
    reason = ' '.join(context.args[2:])
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
        return
    
    target_username = target_username[1:]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    if is_target_owner(target_username):
        await update.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞!")
        return
    
    try:
        if time_str.endswith('m'):
            minutes = int(time_str[:-1])
            mute_duration = timedelta(minutes=minutes)
        elif time_str.endswith('h'):
            hours = int(time_str[:-1])
            mute_duration = timedelta(hours=hours)
        elif time_str.endswith('d'):
            days = int(time_str[:-1])
            mute_duration = timedelta(days=days)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30m, 1h, 1d")
            return
        
        unmute_date = datetime.now() + mute_duration
        
        cursor.execute("INSERT INTO mutes (user_id, username, reason, muted_by, unmute_date, chat_id) VALUES (?, ?, ?, ?, ?, ?)",
                      (0, target_username, reason, user_id, unmute_date, chat_id))
        conn.commit()
        
        await update.message.reply_text(
            f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –∑–∞–º—å—é—á–µ–Ω!\n"
            f"–í—Ä–µ–º—è: {time_str}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–†–∞–∑–º—É—Ç: {unmute_date.strftime('%d.%m.%Y %H:%M')}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30m, 1h, 1d")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {str(e)}")

@only_in_chats
async def unmute_user(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–∞–∑–º—É—á–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute @username")
        return
    
    target_username = context.args[0]
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
        return
    
    target_username = target_username[1:]
    
    try:
        cursor.execute("DELETE FROM mutes WHERE username = ?", (target_username,))
        conn.commit()
        
        if cursor.rowcount > 0:
            await update.message.reply_text(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —Ä–∞–∑–º—å—é—á–µ–Ω!")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –º—É—Ç–æ–≤.")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {str(e)}")

@only_in_chats
async def check_warns(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—Ä–Ω—ã!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warns @username")
        return
    
    target_username = context.args[0]
    
    if not target_username.startswith('@'):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
        return
    
    target_username = target_username[1:]
    
    try:
        cursor.execute("SELECT reason, warned_by, warn_date FROM warns WHERE username = ? ORDER BY warn_date DESC", (target_username,))
        warns = cursor.fetchall()
        
        cursor.execute("SELECT COUNT(*) FROM warns WHERE username = ?", (target_username,))
        warn_count = cursor.fetchone()[0]
        
        if not warns:
            await update.message.reply_text(f"‚úÖ –£ @{target_username} –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤.")
            return
        
        text = f"‚ö†Ô∏è –í–∞—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_username} ({warn_count}/3):\n\n"
        
        for i, (reason, warned_by, warn_date) in enumerate(warns, 1):
            text += f"{i}. {reason}\n"
            text += f"   –í—ã–¥–∞–ª: {warned_by} | {warn_date[:16]}\n\n"
        
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—Ä–Ω–æ–≤: {str(e)}")

@only_in_chats
async def ban_list(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤!")
        return
    
    try:
        cursor.execute("SELECT username, reason, banned_by, ban_date FROM bans ORDER BY ban_date DESC")
        bans = cursor.fetchall()
        
        if not bans:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ –ø—É—Å—Ç.")
            return
        
        text = "üö® –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        
        for username, reason, banned_by, ban_date in bans:
            text += f"üë§ @{username}\n"
            text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            text += f"üëÆ –ó–∞–±–∞–Ω–µ–Ω: {banned_by}\n"
            text += f"üìÖ –î–∞—Ç–∞: {ban_date[:16]}\n"
            text += "‚îÄ" * 30 + "\n"
        
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–æ–≤: {str(e)}")

@only_in_chats
async def add_admin(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if not is_owner(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin @username –∏–ª–∏ /add_admin 123456789")
        return
    
    target = context.args[0]
    
    try:
        if target.isdigit():
            admin_id = int(target)
            cursor.execute("INSERT OR REPLACE INTO admins (admin_id, role) VALUES (?, 'admin')", (admin_id,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω! ID: {admin_id}")
            
        elif target.startswith('@'):
            username = target[1:]
            await update.message.reply_text(
                f"‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω—É–∂–µ–Ω User ID.\n\n"
                f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π ID (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_admin @username –∏–ª–∏ /add_admin 123456789")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@only_in_chats
async def add_owner(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if not is_owner(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_owner @username –∏–ª–∏ /add_owner 123456789")
        return
    
    target = context.args[0]
    
    try:
        if target.isdigit():
            owner_id = int(target)
            cursor.execute("INSERT OR REPLACE INTO admins (admin_id, role) VALUES (?, 'owner')", (owner_id,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω! ID: {owner_id}")
            
        elif target.startswith('@'):
            username = target[1:]
            await update.message.reply_text(
                f"‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω—É–∂–µ–Ω User ID.\n\n"
                f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π ID (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_owner @username –∏–ª–∏ /add_owner 123456789")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@only_in_chats
async def list_admins(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if not is_owner(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    cursor.execute("SELECT admin_id, username, role FROM admins ORDER BY role DESC, admin_id")
    admins = cursor.fetchall()
    
    if not admins:
        await update.message.reply_text("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    text = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for admin in admins:
        admin_id, username, role = admin
        role_icon = "üëë" if role == 'owner' else "üëÆ"
        username_display = f"@{username}" if username else f"ID: {admin_id}"
        text += f"{role_icon} {username_display} ({role})\n"
    
    await update.message.reply_text(text)

@only_in_chats
async def stats(update: Update, context: CallbackContext):
    cursor.execute("SELECT COUNT(*) FROM scammers")
    total_scammers = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM scammers WHERE date(added_date) = date('now')")
    today_scammers = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM admins")
    total_admins = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM admins WHERE role = 'owner'")
    total_owners = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM bans")
    total_bans = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM warns")
    total_warns = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM mutes")
    total_mutes = cursor.fetchone()[0]
    
    text = (
        "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –°–ö–ê–ú–ï–†–û–í\n\n"
        f"‚Ä¢ üö® –í—Å–µ–≥–æ —Å–∫–∞–º–µ—Ä–æ–≤: {total_scammers}\n"
    )

